grammar 'Java';

Java = CompilationUnit ;

OptDocComment = (DocComment)? ; 

TypeDeclaration = 
 OptDocComment  ( ClassDeclaration | InterfaceDeclaration )  ';'  ;

ImportList = ;
CompilationUnit  = 
 (Package)?
 ImportList
 (TypeDeclaration)?  ;

Package  = 
 'package' PackageName  ';'  ;

ImportStatement  = 
 'import'  (  ( PackageName  '.'  '*'  ';'  ) 
 |  ( ClassName  | InterfaceName )  )  ';'  ; 

DocComment = doccomment;
ClassDeclaration = ;
InterfaceDeclaration = ;
TypeDeclaration = ;

ModifierList = Modifier *;

ExtendsList = 'extends' ClassName * 'extends' ;
ImplementsList = 'implements' InterfaceName + ',';
FieldDeclarationList = FieldDeclaration *;

ClassDeclaration  = 
 ModifierList  'class' id 
 ExtendsList?
 ImplementsList? 
 '{'  FieldDeclarationList  '}'  ; 

InterfaceDeclaration  = 
 ModifierList  'interface' id 
 ExtendsList
 '{'  FieldDeclarationList  '}'  ; 

FieldDeclaration  = 
 (  DocComment?  ( MethodDeclaration 
 | ConstructorDeclaration 
 | VariableDeclaration )  ) 
 | StaticInitializer 
 |  ';'  ; 

SquareBracketsList = ('['  ']')* ;

MethodDeclaration  = 
 ModifierList Type id 
 '('  ParameterList  ')'  SquareBracketsList 
 ( StatementBlock  |  ';'  )  ;

ConstructorDeclaration  = 
 ModifierList id  '('  ParameterList  ')' 
StatementBlock  ; 

StatementBlock  =  '{'  StatementList  '}'  ; 

VariableDeclaratorList = VariableDeclarator + ',' ;

VariableDeclaration  = 
 ModifierList Type VariableDeclaratorList 
   ';'  ; 

OptVariableInitializer = ('=' VariableInitializer)? ;

VariableDeclarator  = 
 id  SquareBracketsList  OptVariableInitializer  ; 

VariableInitializerList = VariableInitializer * ',' ( ',' )? ;

VariableInitializer  = 
Expression 
 |  '{'  VariableInitializerList  '}'  ; 

StaticInitializer  = 
 'static' StatementBlock  ; 

ParameterList  = 
Parameter * ','  ; 

Parameter  = 
Type id SquareBracketsList ; 

StatementList = Statement *;
/*
statement  = 
variable_declaration 
 |  ( expression  ';'  ) 
 |  ( statement_block ) 
 |  ( if_statement ) 
 |  ( do_statement ) 
 |  ( while_statement ) 
 |  ( for_statement ) 
 |  ( try_statement ) 
 |  ( switch_statement ) 
 |  (  'synchronized'  '(' expression  ')' statement  ) 
 |  (  'return'  [ expression ]  ';'  ) 
 |  (  'throw' expression ';'  ) 
 |  ( identifier  ':' statement ) 
 |  (  'break'  [ identifier ]  ';'  ) 
 |  (  'continue'  [ identifier ]  ';'  ) 
 |  (  ';'  )  . 

if_statement = 
 'if'  '(' expression  ')' statement 
 [  'else' statement ]  . 

do_statement = 
 'do' statement  'while'  '(' expression  ')'  ';'  . 

while_statement = 
 'while'  '(' expression  ')' statement  . 

for_statement = 
 'for'  '('  ( variable_declaration  |  ( expression  ';'  )  |  ';'  ) 
 [ expression ]  ';' 
 [ expression ]  ';' 
 ')' statement  . 

try_statement = 
 'try' statement 
 <  'catch'  '(' parameter  ')' statement > 
 [  'finally' statement ]  . 

switch_statement = 
 'switch'  '(' expression  ')'  '{' 
 <  (  'case' expression  ':'  ) 
 |  (  'default'  ':'  ) 
 | statement > 
 '}'  . 

expression  = 
numeric_expression 
 | testing_expression 
 | logical_expression 
 | string_expression 
 | bit_expression 
 | casting_expression 
 | creating_expression 
 | literal_expression 
 |  'null' 
 |  'super' 
 |  'this' 
 | identifier 
 |  (  '(' expression  ')'  ) 
 |  ( expression 
 (  (  '('  [ arglist ]  ')'  ) 
 |  (  '[' expression  ']'  ) 
 |  (  '.' expression  ) 
 |  (  ',' expression  ) 
 |  (  'instanceof'  ( class_name | interface_name )  ) 
 )  )  . 

numeric_expression  = 
 (  (  '-' 
 |  '++' 
 |  '--'  ) 
expression ) 
 |  ( expression 
 (  '++' 
 |  '--'  )  ) 
 |  ( expression 
 (  '+' 
 |  '+=' 
 |  '-' 
 |  '-=' 
 |  '*' 
 |  '*=' 
 |  '|' 
 |  '|=' 
 |  '%' 
 |  '%='  ) 
expression  )  . 

testing_expression  = 
 ( expression 
 (  '>' 
 |  '<' 
 |  '>=' 
 |  '<=' 
 |  '==' 
 |  '!='  ) 
expression  )  . 

logical_expression  = 
 (  '!' expression ) 
 |  ( expression 
 (  'ampersand' 
 |  'ampersand=' 
 |  '|' 
 |  '|=' 
 |  '^' 
 |  '^=' 
 |  (  'ampersand'  'ampersand'  ) 
 |  '||=' 
 |  '%' 
 |  '%='  ) 
expression  ) 
 |  ( expression  '?' expression  ':' expression ) 
 |  'true' 
 |  'false'  . 

string_expression  =  ( expression 
 (  '+' 
 |  '+='  ) 
expression  )  . 

bit_expression  = 
 (  '~' expression ) 
 |  ( expression 
 (  '>>=' 
 |  '<<' 
 |  '>>' 
 |  '>>>'  ) 
expression  )  . 

casting_expression  = 
 '(' type  ')' expression  . 

creating_expression  = 
 'new'  (  ( classe_name  '('  [ arglist ]  ')'  ) 
 |  ( type_specifier  [  '[' expression  ']'  ]  <  '['  ']'  >  ) 
 |  (  '(' expression  ')'  )  )  . 

literal_expression  = 
integer_literal 
 | float_literal 
 | string 
 | character  . 

arglist  = 
expression  <  ',' expression  >  . 
*/
Type  = 
TypeSpecifier  SquareBracketsList  ;

TypeSpecifier = 
 'boolean' 
 |  'byte' 
 |  'char' 
 |  'short' 
 |  'int' 
 |  'float' 
 |  'long' 
 |  'double' 
 | ClassName 
 | InterfaceName  ; 

Modifier = 
 'public' 
 |  'private' 
 |  'protected' 
 |  'static' 
 |  'final' 
 |  'native' 
 |  'synchronized' 
 |  'abstract' 
 |  'threadsafe' 
 |  'transient'  ; 
 
PackageName = 
id 
 |  ( PackageName  '.' id )  ;

ClassName  = 
id 
 |  ( PackageName  '.' id )  ; 

InterfaceName = 
id 
 |  ( PackageName  '.' id )  ; 
/*
integer_literal = 
 (  (  "1..9"  <  "0..9"  >  ) 
 /  <  "0..7"  > 
 /  (  "0"  "x"  "0..9a..f"  <  "0..9a..f"  >  )  ) 
 [  "l"  ]  . 

float_literal  = 
 ( decimal_digits  "."  [ decimal_digits ]  [ exponent_part ]  [ float_type_suffix ]  ) 
 /  (  "." decimal_digits  [ exponent_part ]  [ float_type_suffix ]  ) 
 /  ( decimal_digits  [ exponent_part ]  [ float_type_suffix ]  )  . 

decimal_digits  = 
 "0..9"  <  "0..9"  >  . 

exponent_part  = 
 "e"  [  "+"  /  "-"  ] decimal_digits  . 

float_type_suffix  = 
 "f"  /  "d"  . 

character  =
  "based on the unicode character set"  . 

string  =  
 "''"  < character  >  "''"  . 

identifier  =
  "a..z,$,_"  <  "a..z,$,_,0..9,unicode character over 00C0"  >  . 
*/

id = [a-zA-Z][A-Za-z0-9_]* ;
doccomment = '/**' ([^\r]|[^\n]|.)* '*/';

