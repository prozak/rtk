grammar 'Java';

Java = CompilationUnit ;

OptDocComment = (DocComment)? ; 

TypeDeclaration = 
 OptDocComment  ( ClassDeclaration | InterfaceDeclaration )  ';'  ;

ImportList = (ImportStatement)*;
CompilationUnit  = 
 (Package)?
 ImportList
 (TypeDeclaration)?  ;

Package  = 
 'package' CompoundName  ';'  ;

ImportStatement  = 
 'import'  (  ( CompoundName  '.'  '*' ) 
 | CompoundName  )  ';'  ; 

DocComment = doccomment;

ModifierList = Modifier *;

ExtendsList = 'extends' CompoundName * 'extends' ;
ImplementsList = 'implements' CompoundName + ',';
FieldDeclarationList = FieldDeclaration *;

ClassDeclaration  = 
 ModifierList  'class' id 
 ExtendsList?
 ImplementsList? 
 '{'  FieldDeclarationList  '}'  ; 

InterfaceDeclaration  = 
 ModifierList  'interface' id 
 ExtendsList
 '{'  FieldDeclarationList  '}'  ; 

FieldDeclaration  = 
 (ModifierList ((  DocComment?  ( MethodDeclaration 
 | ConstructorDeclaration 
 | VariableDeclaration )  ) 
 | StaticInitializer)) 
 |  ';'  ; 

SquareBracketsList = ('[' OptExpression ']')* ;

MethodDeclaration  = 
 Type id 
 '('  ParameterList  ')'  SquareBracketsList 
 ( StatementBlock  |  ';'  )  ;

ConstructorDeclaration  = 
 id  '('  ParameterList  ')' 
StatementBlock  ; 

StatementBlock  =  '{'  StatementList  '}'  ; 

VariableDeclaratorList = VariableDeclarator + ',' ;

VariableDeclaration  = 
 Type VariableDeclaratorList 
   ';'  ; 

OptVariableInitializer = ('=' VariableInitializer)? ;

VariableDeclarator  = 
 id  SquareBracketsList  OptVariableInitializer  ; 

VariableInitializerList = VariableInitializer * ',' ( ',' )? ;

VariableInitializer  = 
Expression 
 |  '{'  VariableInitializerList  '}'  ; 

StaticInitializer  = 
 StatementBlock  ; 

ParameterList  = 
Parameter * ','  ; 

Parameter  = 
Type id SquareBracketsList ; 

StatementList = Statement *;

OptExpression = Expression? ;

OptId = id?;

Statement =
 StatementWithoutIf
 |  IfStatement
  ;

StatementWithoutIf = 
VariableDeclaration 
 |  Expression  ';'
 |  StatementBlock
 |  DoStatement
 |  WhileStatement
 |  ForStatement
 |  TryStatement
 |  SwitchStatement
 |  'synchronized'  '(' Expression  ')' Statement
 |  'return'  OptExpression  ';'
 |  'throw' Expression ';'
 |  id  ':' Statement
 |  'break'  OptId  ';'
 |  'continue'  OptId  ';'
 |  ';' ;

OptElsePart = ('else' Statement)? ;

IfStatement = 
 'if'  '(' Expression  ')' StatementWithoutIf
   OptElsePart ; 

DoStatement = 
 'do' Statement  'while'  '(' Expression  ')'  ';'  ; 

WhileStatement = 
 'while'  '(' Expression  ')' Statement  ; 

ForStatement = 
 'for'  '('  ( VariableDeclaration  |  ( Expression  ';'  )  |  ';'  ) 
 OptExpression  ';' 
 OptExpression  ';' 
 ')' Statement  ; 

CatchList = (  'catch'  '(' Parameter  ')' Statement)* ;

OptFinally = ('finally' Statement)?;

TryStatement = 
 'try' Statement 
  CatchList
  OptFinally  ; 

SwitchCaseList = ((  'case' Expression  ':'  ) 
 |  (  'default'  ':'  ) 
 | Statement )*;

SwitchStatement = 
 'switch'  '(' Expression  ')'  '{' 
 SwitchCaseList 
 '}'  ;

UnaryOp =
'-' 
 | '++' 
 | '--'
 | '!'
 | '~' ;

Expression  =
 Assignment |
 ConditionalExpression;
/*
 UnaryOp Expression
 | Expression (NumericExpressionEnd 
 | TestingExpressionEnd
 | LogicalExpressionEnd
 | BitExpressionEnd
 | '(' Arglist ')' 
 | '[' Expression  ']'
 | '.' Expression
 | ',' Expression
 | 'instanceof'  CompoundName )
 | CastingExpression
 | CreatingExpression
 | LiteralExpression
 | '(' Expression  ')'
 ;*/

FieldAccess = Primary '.' id | 'super' '.' id ;

LeftHandSide = CompoundName
 | FieldAccess
 | ArrayAccess ;

AssignmentOp =
 '+=' 
 | '-=' 
 | '*=' 
 | '|='
 | '&=' 
 | '^=' 
 | '%=' ;

Assignment = LeftHandSide AssignmentOp Expression;

ConditionalExpression = ConditionalOrExpression | ConditionalOrExpression '?' Expression ':' ConditionalExpression ;

ConditionalOrExpression = ConditionalAndExpression | ConditionalOrExpression '||' ConditionalAndExpression ;

ConditionalAndExpression = InclusiveOrEpression | ConditionalAndExpression '&&' InclusiveOrEpression ;

InclusiveOrEpression = ExclusiveOrExpression | InclusiveOrEpression '|' ExclusiveOrExpression;

ExclusiveOrExpression = AndExpression | ExclusiveOrExpression '^' AndExpression ;

AndExpression = EqualityExpression | AndExpression '&' EqualityExpression ;

EqualityOp = '==' | '!=' ;

EqualityExpression = RelationalExpression | EqualityExpression EqualityOp RelationalExpression ;

RelationalOp = '<' | '>' | '<=' | '>=' ;

RelationalExpression = ShiftExpression | RelationalExpression RelationalOp ShiftExpression | RelationalExpression 'instanceof' Type ;

ShiftOp = '>>' | '<<' | '>>>' ;

ShiftExpression = AdditiveExpression | ShiftExpression ShiftOp AdditiveExpression ;

AdditiveOp = '+' | '-' ;

AdditiveExpression = MultiplicativeExpression | AdditiveExpression AdditiveOp MultiplicativeExpression ;

MultiplicativeOp = '*' | '/' | '%' ;

MultiplicativeExpression = UnaryExpression | MultiplicativeExpression MultiplicativeOp UnaryExpression ;

CastExpression = '(' Type ')' UnaryExpression ;

PrefixOp = '++' | '--' | '+' | '-' | '~' | '!' ;

PostfixOp = '++' | '--' ;

PostExpression = PostfixExpression PostfixOp ;

UnaryExpression = PrefixOp UnaryExpression | CastExpression | PostfixExpression ;

PostfixExpression = Primary | CompoundName | PostExpression;

Primary = Literal | 'this' | '(' Expression ')' | CreationExpression | FieldAccess | MethodInvocation | ArrayAccess ;

CreationExpression = 'new' Type ( '(' Arglist ')' | SquareBracketsList );

ArrayAccess = CompoundName '[' Expression ']' | Primary '[' Expression ']' ;

Literal = integerLiteral | floatLiteral | 'true' | 'false' | char | string | 'null' ;

MethodInvocation = CompoundName '(' Arglist ')' | Primary '.' id  '(' Arglist ')' | 'super' '.' id '(' Arglist ')' ;

Arglist = Expression * ',' ;

Type  = 
TypeSpecifier  SquareBracketsList  ;

TypeSpecifier = 
 'boolean' 
 |  'byte' 
 |  'char' 
 |  'short' 
 |  'int' 
 |  'float' 
 |  'long' 
 |  'double' 
 | CompoundName  ; 

Modifier = 
 'public' 
 |  'private' 
 |  'protected' 
 |  'static' 
 |  'final' 
 |  'native' 
 |  'synchronized' 
 |  'abstract' 
 |  'threadsafe' 
 |  'transient'  ; 
 
CompoundName = 
id 
 |  (CompoundName  '.' id )  ;

integerLiteral = 
 (  (  [1..9]  [0..9]*  ) 
 |  ( '0' [0..7]* )
 |  (  '0'  'x'  [0..9a..f]  [0..9a..f]*   )  ) 
 [l]?  ; 

floatLiteral  = 
 ( [0..9]+ '.' [0..9]* 'f'? )
 |  ( '.' [0..9]+ 'f'? )
 |  ( [0..9]+ 'f' ) ; 

decimalDigits  = 
 [0..9]  [0..9]*  ; 

exponentPart  = 
 'e'  (  '+'  |  '-'  )? decimalDigits  ; 

floatTypeSuffix  = 
 'f'  |  'd'  ; 

char  = '\'' . '\'' ;

string  = '"' .* '"' ;

id = [a-zA-Z$_][A-Za-z$0-9_]* ;
doccomment = '/**' .* '*/';

# Whitespace and comments (ignored)
Ignore: ws = [ \t\n\r]+ ;
Ignore: comment = '//' [^\n]* '\n' ;
Ignore: blockComment = '/*' ([^*] | [*] [^/])* '*/' ;

